name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

permissions:
  contents: read
  actions: write
  
env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-preview:
    name: Deploy to Preview
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'dev' || github.event.workflow_run.head_branch == 'stg')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download build artifacts from CI
        id: download-artifact
        uses: actions/download-artifact@v3
        with:
          name: nextjs-build
          path: .next
        continue-on-error: false

      # - name: List downloaded files in .next directory
      #   run: ls -la .next

      - name: Deploy to Vercel Preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_PREVIEW_TOKEN }}
        run: |
          if [ "${{ github.event.workflow_run.head_branch }}" == "dev" ]; then
            ENVIRONMENT="development"
          elif [ "${{ github.event.workflow_run.head_branch }}" == "stg" ]; then
            ENVIRONMENT="staging"
          fi
          npx vercel --token $VERCEL_TOKEN --scope ${{ secrets.VERCEL_PROJECT_ID }} --env NEXT_PUBLIC_ENV=$ENVIRONMENT --prod=false

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts from CI
        id: download-artifact
        uses: actions/download-artifact@v3
        with:
          name: nextjs-build
          path: .next
        continue-on-error: false

      # - name: List downloaded files in .next directory
      #   run: ls -la .next

      - name: Deploy to Vercel Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_PROD_TOKEN }}
        run: |
          npx vercel --token $VERCEL_TOKEN --scope ${{ secrets.VERCEL_PROJECT_ID }} --env NEXT_PUBLIC_ENV=production --prod=true
