name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - dev
      - stg
      - main
  push:
    branches:
      - dev
      - stg
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ matrix.node-version }}-

      - name: Install Dependencies
        run: npm ci

  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    needs: setup-environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore Node Modules from Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      - name: Run Linting
        run: npm run lint

  test:
    name: üß™ Run Test Cases
    runs-on: ubuntu-latest
    needs: setup-environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore Node Modules from Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      - name: Run Test Cases
        run: npm run test

  build-app:
    name: üõ†Ô∏è Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore Node Modules from Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      - name: Build Next.js Application
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: .next
          include-hidden-files: true

  deploy-preview-development:
    name: üöÄ Deploy to Preview (dev branch)
    runs-on: ubuntu-latest
    needs: build-app
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: .next

      - name: Deploy to Preview (development)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_PREVIEW_TOKEN }}
        run: |
          npx vercel --token $VERCEL_TOKEN --env NEXT_PUBLIC_ENV=development --prod=false --confirm

  deploy-preview-staging:
    name: üöÄ Deploy to Preview (stg branch)
    runs-on: ubuntu-latest
    needs: build-app
    if: github.ref == 'refs/heads/stg'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: .next

      - name: Deploy to Preview (staging)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_PREVIEW_TOKEN }}
        run: |
          npx vercel --token $VERCEL_TOKEN --env NEXT_PUBLIC_ENV=staging --prod=false --confirm

  deploy-production:
    name: üöÄ Deploy to Production (main branch)
    runs-on: ubuntu-latest

    needs: build-app
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: .next

      - name: Deploy to Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_PROD_TOKEN }}
        run: |
          npx vercel --token $VERCEL_TOKEN --env NEXT_PUBLIC_ENV=production --prod=true --confirm
